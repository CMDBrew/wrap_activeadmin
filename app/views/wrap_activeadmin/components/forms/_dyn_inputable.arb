reference_key ||= 'dyn_input_configs'
defaults        = f.object.try(:dyn_inputable_configs, reference_key: reference_key)

if defaults
  keys    = f.object.dyn_input_configs.map(&:reference_key)
  configs = defaults.reject { |x| keys.include? x[:reference_key] }
  attrs   = {}
  attrs["#{reference_key}_attributes"] = configs
  configs &&
    f.object.assign_attributes(attrs)
end

f.has_many reference_key.to_sym, new_record: false do |j|
  config_scope =
    [
      :wrap_activeadmin, :dyn_inputable,
      j.object.dyn_inputable_type.underscore, j.object.reference_key.to_sym
    ]
  name =
    j.object.name &&
    t(:name, scope: config_scope, default: j.object.name)

  j.inputs name do
    klass = j.object.multiple? ? '' : 'unwrap'
    j.input :reference_key, as: :hidden
    j.object.dyn_input_groups.build if j.object.dyn_input_groups.blank? && !j.object.multiple?
    new_record =
      if j.object.multiple?
        t("wrap_activeadmin.dyn_forms.#{j.object.reference_key}",
          default: WrapActiveadmin::DynInputGroup.model_name.human)
      else
        false
      end

    options = {
      new_record: new_record,
      allow_destroy: j.object.multiple?,
      class: klass
    }
    options[:sortable] = :position if j.object.sortable?

    j.has_many :dyn_input_groups, options do |k|
      k.inputs(class: 'columns') do
        j.object.config.sort_by { |x| x['position'] }.each do |field|
          field_presence =
            k.object.dyn_inputs.
            select { |x| x.reference_key == field['reference_key'] }.present?
          next if field_presence

          k.object.dyn_inputs.build(
            reference_key: field['reference_key'],
            type:          "wrap_activeadmin/dyn_input_#{field['type']}".camelcase,
            position:      field['position']
          )
        end

        k.semantic_fields_for :dyn_inputs do |d|
          scope =
            config_scope + [:dyn_inputs, d.object.reference_key.to_sym]
          config = j.object.config.find { |x| x['reference_key'] == d.object.reference_key }
          label =
            config['label'] &&
            t(:label, scope: scope, default: config['label'])
          hint =
            config['hint'] &&
            t(:hint, scope: scope, default: config['hint'])
          span      = config['span']
          required  = config['required']

          d.input :reference_key, as: :hidden
          d.input :type,          as: :hidden

          case d.object.type
          when WrapActiveadmin::DynInputText.to_s
            options = { rows: config['rows'] }
            options[:class] = 'tinymce' if config['richtext']

            d.input :value_text,
                    label: label,
                    required: required,
                    hint: hint,
                    input_html: options,
                    wrapper_html: { class: "col-md-#{span}" }
          when WrapActiveadmin::DynInputNumber.to_s
            d.input :value_number,
                    label: label,
                    required: required,
                    hint: hint,
                    wrapper_html: { class: "col-md-#{span}" }
          when WrapActiveadmin::DynInputFile.to_s
            hint = d.object.persisted? ? file_link(k.object) : hint
            d.input :value_string,
                    label: label,
                    required: required,
                    hint: hint,
                    wrapper_html: { class: "col-md-#{span}" }
            d.input :value_string_cache,
                    as: :hidden
          when WrapActiveadmin::DynInputSelect.to_s
            field      = config['multiple'] ? :value_array : :value_string
            collection = config['collection'] || []
            collection =
              collection.map do |x|
                [t("collection.#{x.downcase&.underscore}", scope: scope, default: x), x]
              end

            d.input field,
                    label: label,
                    required: required,
                    hint: hint,
                    as: :select,
                    multiple: config['multiple'],
                    collection: collection,
                    selected: d.object.value_array,
                    wrapper_html: { class: "col-md-#{span}" },
                    input_html: { class: 'select2' }
          when WrapActiveadmin::DynInputRelation.to_s
            field      = config['multiple'] ? :value_array : :value_string
            model      = config['relation_type'].constantize
            collection = model.try(config['relation_method']) || []

            d.input field,
                    label: label,
                    required: required,
                    hint: hint,
                    as: :select,
                    multiple: config['multiple'],
                    collection: dyn_select_collection(collection, config),
                    selected: d.object.value_array,
                    wrapper_html: { class: "col-md-#{span}" },
                    input_html: {
                      class: 'select2',
                      data: {
                        'select2-search': true,
                        'select2-template': config['option_template'],
                        'select2-selection-template': config['option_template']
                      }
                    }
          else
            d.input :value_string,
                    label: label,
                    required: required,
                    hint: hint,
                    wrapper_html: { class: "col-md-#{span}" }
          end
        end
      end
    end
  end
end
